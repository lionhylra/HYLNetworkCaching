{"name":"Hylnetworkcaching","tagline":"A light tool that used to cache network request for offline access.","body":"# HYLNetworkCaching\r\nA light tool that used to cache network request for offline access.\r\n\r\n## Install\r\nDrag and Drop \"HYLNetworkCaching\" folder into your project.\r\n\r\n## How to use\r\n1. Initialize a instance of HYLNetworkCaching\r\n\r\n\t```swift\r\n\t// In the network module\r\n\tlet networkCache = HYLNetworkCaching(delegate: self)\r\n\t```\r\n2. Implement the method in delegate. In this is the method where you get the data from network and put the data into callback closure. Specify a name for each piece of result returned from network request. We use AFNetworking in the example below.\r\n\r\n\t```swift\r\n\tfunc fetchDataFromNetworkForModelName(\r\n\t\tmodelName: String,\r\n\t\t  success: ((data: AnyObject) -> Void),\r\n\t\t  failure: ((error: NSError) -> Void)) {\r\n\t\t  \r\n\t        if modelName == \"employer\" {\r\n\t            let manager = AFHTTPRequestOperationManager()\r\n\t            let url = \"http://xxx.com/api/getdata\"\r\n\t            manager.GET(url, parameters: nil, success: { (operation, responseObject) -> Void in\r\n\t                success(data: responseObject)//1\r\n\t            }) { (operation, error) -> Void in\r\n\t               failure(error: error)\r\n\t            }\r\n\t        }\r\n\t}\r\n\t\r\n\t//[1]:What you put into the success closure will be what you will get from func fetchDataForModelName(modelName:String, success:((data:AnyObject?)->Void)?, failure:((error:NSError)->Void)?)\r\n\t```\r\n\r\n3. Then from your view controller, fetch the data.\r\n\r\n\t```swift\r\n\tlet networkCache = ...\r\n\tnetworkCache.fetchDataForModelName(\"TestResult\", success: { (data) -> Void in\r\n\t            if data == nil {\r\n\t                return\r\n\t            }\r\n\t            println(\"\\(data)\")\r\n\t        }) { (error) -> Void in\r\n\t            println(error.localizedDescription)\r\n\t        }\r\n\t```\r\n\r\n## What happens behind the scene\r\n\r\nFor the first time app requests data, the cache doesn't has the data. So it first fetch data from network API, then return the data immediately on main thread and meanwhile save the data to the cache on anoher thread.\r\n\r\nAfter that, when app requests data, it first get the cached data from Core Data, and then request the API. After receiving the data from API, it returns the data to the success closure immediately and meanwhile update(delete the old data and insert the new data) the cached data in Core Data.\r\n\r\nIf network is not available, it returns cached data only and the failure closure is called.\r\n\r\n![activity diagram](https://github.com/lionhylra/HYLNetworkCaching/blob/master/activity%20diagram.png?raw=true)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}